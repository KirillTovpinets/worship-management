// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(SINGER)
  key           SongKey?  // Performer's preferred key
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  songAdaptations SongAdaptation[]
}

model Song {
  id             String    @id @default(cuid())
  title          String
  tone           SongKey
  bpm            String
  originalSinger String
  author         String
  pace           SongPace
  style          String
  tags           String
  nature         String
  lyrics         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  events         EventSong[]
  adaptations SongAdaptation[]
}

model Event {
  id          String      @id @default(cuid())
  title       String
  date        DateTime
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  songs       EventSong[]
}

model EventSong {
  id        String   @id @default(cuid())
  eventId   String
  songId    String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([eventId, songId])
}

model SongAdaptation {
  id        String   @id @default(cuid())
  songId    String
  singerId  String
  key       SongKey
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  singer    User     @relation(fields: [singerId], references: [id], onDelete: Cascade)

  @@unique([songId, singerId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  SINGER
}

enum SongKey {
  C
  C_SHARP
  D
  D_SHARP
  E
  F
  F_SHARP
  G
  G_SHARP
  A
  A_SHARP
  B
}

enum SongPace {
  SLOW
  MODERATE
  FAST
}
